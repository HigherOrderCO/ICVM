def T = λt λf t
def F = λt λf f
def and = λpλq dup #a p1 p2 = p; (p1 q p2)
def Leaf = λn λl l

// Equivalent to `def Node = λa λb λn λl (n a b)` but prevents fast dispatch of `destroy` if arg of `destroy` is not evaluated eagerly
def halfNode = λn λx (n x)
def Node = λa λb λn λl (halfNode (halfNode n a) b)

def Y = λf ((λx (f (x x))) (λx (f (x x))))
def destroy = (Y λdestroy λt (t (λaλb dup #d destroy1 destroy2 = destroy; (and (destroy1 a) (destroy2 b))) T))
(destroy (Node Leaf Leaf))
